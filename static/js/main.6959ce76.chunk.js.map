{"version":3,"sources":["ListItem.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","react_default","a","createElement","lib","animationIn","animationOut","isVisible","animation","className","classes","onClick","clicker","name","text","date","index_esm","editer","deleter","App","state","toDoList","todo","done","isEmpty","isEmptyEdit","currentTodoId","isEditing","changeNameInTodo","e","newTodo","Object","objectSpread","_this","Date","setState","changeTextInTodo","addToList","updatedList","toConsumableArray","push","makeDone","id","currentItem","deleteItemHandler","newArray","setTimeout","splice","this","bind","assertThisInitialized","editTodoNow","actualTodo","current","editList","itemIde","toDoLister","helloKitty","_this2","MakeRain","length","map","src_ListItem","toLocaleString","key","type","placeholder","onChange","event","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6959ce76.chunk.js","sourcesContent":["import React from 'react';\nimport { Animated } from \"react-animated-css\";\nimport { FiX, FiCheck, FiEdit2 } from \"react-icons/fi\";\n\nconst ListItem = (props) => {\n    return (\n        <Animated animationIn=\"fadeInLeft\" animationOut=\"fadeOutRight\" isVisible={props.animation}>\n            <li className={props.classes}>\n                <div>\n                    <div className=\"done_icon\" onClick={props.clicker}><p>completed.</p></div>\n                    <h2>{props.name}</h2>\n                    <p>{props.text}</p>\n                    <small>{props.date}</small>\n                    <div className=\"finished_button\" onClick={props.clicker}><FiCheck /></div>\n                    <div className=\"edit_button\" onClick={props.editer}><FiEdit2 /></div>\n                    <div className=\"delete_button\" onClick={props.deleter}><FiX /></div>\n                </div>\n            </li>\n        </Animated>\n    );\n}\n\nexport default ListItem;","import React from 'react';\nimport ListItem from './ListItem';\nimport { Animated } from \"react-animated-css\";\nimport { FiAlertTriangle, FiEdit3, FiPlus } from 'react-icons/fi';\n\nimport './App.scss';\n\n\nclass App extends React.Component {\n\n  state = {\n    toDoList: [],\n    todo: {\n      name: '',\n      text: '',\n      date: null,\n      done: false,\n      isVisible: true,\n    },\n    isEmpty: false,\n    isEmptyEdit: false,\n    currentTodoId: '',\n    isEditing: false,\n  }\n\n\n  changeNameInTodo = (e) => {\n    const newTodo = { ...this.state.todo };\n    newTodo.name = e;\n    newTodo.date = new Date();\n    this.setState({ todo: newTodo })\n  }\n\n  changeTextInTodo = (e) => {\n    const newTodo = { ...this.state.todo };\n    newTodo.text = e;\n    newTodo.date = new Date();\n    this.setState({ todo: newTodo })\n  }\n\n\n  addToList = () => {\n    const newTodo = { ...this.state.todo };\n    if (newTodo.name === '' || newTodo.text === '') {\n      this.setState({ isEmpty: true })\n    } else {\n      this.setState({ isEmpty: false })\n      let updatedList = [...this.state.toDoList];\n      updatedList.push(this.state.todo);\n      this.setState({ toDoList: updatedList });\n\n      newTodo.name = '';\n      newTodo.text = '';\n      this.setState({ todo: newTodo })\n    }\n  }\n\n  makeDone = (id) => {\n    const currentItem = this.state.toDoList[id];\n    if (currentItem.done === true) {\n      currentItem.done = false;\n    } else {\n      currentItem.done = true;\n    }\n    this.setState({ currentItem: currentItem })\n  \n  }\n\n  deleteItemHandler = (id) => {\n    if (this.state.isEditing) {\n      return;\n    } else {\n      const newArray = [...this.state.toDoList];\n      const currentItem = this.state.toDoList[id];\n      currentItem.isVisible = false;\n      this.setState({ currentItem: currentItem })\n      if (currentItem.isVisible === false) {\n        setTimeout(\n          function () {\n            newArray.splice(id, 1);\n            this.setState({ toDoList: newArray });\n          }.bind(this), 1000\n        );\n      }\n    }\n  }\n\n  editTodoNow = (id) => {\n    const currentItem = this.state.toDoList[id];\n    const actualTodo = { ...this.state.todo };\n    const current = { ...currentItem };\n\n    actualTodo.name = current.name;\n    actualTodo.text = current.text;\n\n    this.setState({ todo: actualTodo })\n    this.setState({ currentTodoId: id })\n    this.setState({ isEditing: true });\n\n  }\n\n  editList = () => {\n\n    if (this.state.currentTodoId !== '') {\n\n      const actualTodo = { ...this.state.todo };\n\n      if (actualTodo.name === '' || actualTodo.text === '') {\n        this.setState({ isEmptyEdit: true })\n        return;\n      } else {\n        let itemIde = this.state.currentTodoId;\n        const toDoLister = [...this.state.toDoList];\n        const helloKitty = toDoLister[itemIde];\n\n        helloKitty.name = actualTodo.name\n        helloKitty.text = actualTodo.text\n\n        this.setState({ toDoList: toDoLister })\n        this.setState({ currentTodoId: '' })\n\n        actualTodo.name = ''\n        actualTodo.text = ''\n        this.setState({ todo: actualTodo })\n\n     \n        this.setState({ isEditing: false });\n        this.setState({ isEmptyEdit: false })\n      }\n\n\n\n\n    } else {\n      return;\n    }\n  }\n\n\n  render() {\n\n    let MakeRain = '';\n    if (this.state.toDoList.length > 0) {\n\n      MakeRain = <ul>\n        {this.state.toDoList.map((todo, id) => {\n          return <ListItem\n            classes={todo.done ? \"checked\" : null}\n            name={todo.name}\n            animation={todo.isVisible}\n            deleter={() => this.deleteItemHandler(id)}\n            editer={() => this.editTodoNow(id)}\n            text={todo.text}\n            date={todo.date.toLocaleString()}\n            key={todo.date}\n            clicker={() => this.makeDone(id)} />\n        })}\n      </ul>;\n\n    } else {\n      MakeRain = <div className=\"empty_list\"><p><FiEdit3 /></p>Make some Todos.</div>\n    }\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n\n          <div className=\"row\">\n            <div className=\"col-md-6 left_side\">\n              <div className=\"left_side\">\n                {this.state.isEditing ? <h1><span>Edit</span> Todo</h1> : <h1><span>Add</span> Todo</h1>}\n                <div>\n                  <input type=\"text\" placeholder=\"*Name\" onChange={event => this.changeNameInTodo(event.target.value)} value={this.state.todo.name} />\n                  <textarea onChange={event => this.changeTextInTodo(event.target.value)} type=\"text\" placeholder=\"*Text\" value={this.state.todo.text} />\n                  {this.state.isEditing ? <button onClick={this.editList}><FiEdit3 /></button> : <button onClick={this.addToList}><FiPlus /></button>}\n                  {this.state.isEmpty ? <Animated animationIn=\"bounceIn\"><p className=\"alert\"><FiAlertTriangle className=\"alert_icon\" />Please fill up both inputs</p> </Animated> : null}\n                  {this.state.isEmptyEdit ? <Animated animationIn=\"bounceIn\"><p className=\"alert\"><FiAlertTriangle className=\"alert_icon\" />Don't do empty fields</p> </Animated> : null}\n                </div>\n\n              </div>\n            </div>\n            <div className=\"col-md-6 right_side\">\n              <div>\n                {MakeRain}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n<App />,\ndocument.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}